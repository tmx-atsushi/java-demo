# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  # required for all workflows
  security-events: write
  # only required for workflows in private repositories
  actions: read
  contents: read

# env:
  # Path to the solution file relative to the root of the project.
  # SOLUTION_FILE_PATH: ./Security/Security.sln

jobs:
  build:

    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Parasoft Jtest
      # You may pin to the exact commit or the version.
      # uses: parasoft/run-jtest-action@e0fc5eba99b1236c2c04d7cbfd8d67808bc8bf9e
        uses: parasoft/run-jtest-action@1.0.0
        with:
          # Installation folder of Parasoft Jtest. If not specified, the cpptestcli executable must be added to PATH.
          installDir: 'C:/tools/parasoft_jtest_2022.1.0_win32_x86_64/jtest'
          # Working directory for running Jtest.
          # workingDir: # optional, default is ${{ github.workspace }}
          # Test configuration to be used for code analysis.
          testConfig: 'builtin://CWE Top 25 2019' # optional, default is builtin://Recommended Rules
          # Output folder for reports from code analysis.
          # reportDir: # optional, default is reports
          # Format of reports from code analysis.
          reportFormat: 'sarif' # optional, default is xml,html,sarif
          # Input scope for analysis.
          # input: # optional, default is jtest.data.json
          # Additional parameters for the jtestcli executable.
          # additionalParams: # optional, default is 
          # Uses the jtest.data.json generated with the Gradle command in the previous step
          input: build/jtest/jtest.data.json
        
      - name: Add Secure Code Warrior contextual training to SARIF
        uses: SecureCodeWarrior/github-action-add-sarif-contextual-training@v1.0.7
        with:
          inputSarifFile: reports/report.sarif
          outputSarifFile: reports/report.processed.sarif
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      # Uploads analysis results in the SARIF format, so that they are displayed as GitHub code scanning alerts.
      - name: Upload results (SARIF)
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: reports/report.processed.sarif
        
